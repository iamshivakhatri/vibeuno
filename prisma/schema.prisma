// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Comment {
  id          String    @id @default(cuid())
  content     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  post        Place      @relation(fields: [placeId], references: [id])
  placeId     String
  createdAt   DateTime  @default(now())
  editedAt    DateTime?
  isEdited    Boolean   @default(false)
  likes       Like[]    // Relation to the Like model
  reported    Boolean   @default(false)
  parentId    String?
  parent      Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children    Comment[] @relation("CommentToComment")
  visible     Boolean   @default(true)
}

model Like {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  comment     Comment   @relation(fields: [commentId], references: [id])
  commentId   String
  createdAt   DateTime  @default(now())
}

model City {
  id          String    @id @default(cuid())
  name        String
  state       String
  country     String
  description String?   // Optional
  coverImage  String?   // Optional
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  places      Place[]   // One-to-many relation with Place

  @@unique([name, state, country]) // Composite unique constraint
}



model Place {
  id          String    @id @default(cuid())
  name        String?
  caption     String?
  description String?
  state       String
  city        String
  cityId      String?      // Foreign key for City
  cityName    City?        @relation(fields: [cityId], references: [id]) // Link to City
  country     String?
  category    String?
  imageUrl    String?
  image       Json?
  images      Json?
  comments    Comment[]
  type        PlaceType @default(VISITED) // VISITED or WISHLIST
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  numVotes      Int       @default(0)
  votedUsers    User[]    @relation("PlaceVotes") // Changed to User relation
  votes       Vote[]
  wishlistItems WishlistItem[] // Back-reference for places added to wishlists
  user        User      @relation(fields: [userId], references: [id])

  @@index([state])
  @@index([city])
  @@index([category])
}

model User {
  id        String   @id @default(cuid())
  clerkId   String?  @unique
  email     String   @unique
  name      String?
  profileUrl    String?
  coverPhotoUrl String?
  university String?
  location  String?
  occupation String?
  interests String?
  createdAt DateTime @default(now())
  comments  Comment[] // Add this relation
  commentLikes  Like[]   // Add this relation
  places    Place[]
  votedPlaces   Place[]  @relation("PlaceVotes") // Add this relation
  votes     Vote[]
  wishlist  WishlistItem[]  // Back-reference to wishlist items
}

model Vote {
  id        String   @id @default(cuid())
  placeId   String
  userId    String
  createdAt DateTime @default(now())
  place     Place    @relation(fields: [placeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([placeId, userId])
}


model WishlistItem {
  id        String   @id @default(cuid())
  placeId   String
  userId    String
  notes     String?  // Optional user notes for the wishlist
  createdAt DateTime @default(now())
  place     Place    @relation(fields: [placeId], references: [id]) // Link to the Place model
  user      User     @relation(fields: [userId], references: [id]) // Link to the User model

  @@unique([placeId, userId]) // Prevent duplicates for the same user and place
}

// Enum to define the type of a place
enum PlaceType {
  VISITED
  WISHLIST
}