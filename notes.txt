  // const uploadFiles = async () => {
  //   if (!placeId) {
  //     console.log("placeId:", placeId);
  //     toast({
  //       title: "Please select a place before uploading photos",
  //       variant: "destructive",
  //     });
  //     return;
  //   }
  //   if (files.length === 0) {
  //     toast({ title: "No photos selected for upload", variant: "destructive" });
  //     return;
  //   }

  //   setUploading(true);
  //   setProgress(0);

  //   try {
  //     const formData = new FormData();
  //     files.forEach((file) => formData.append("files", file));
  //     formData.append("placeId", placeId);
  //     formData.append("userId", user.id);
  //     formData.append("category", category);

  //     const response = await fetch("/api/upload", {
  //       method: "POST",
  //       body: formData,
  //     });

  //     if (!response.ok) throw new Error("Upload failed");

  //     const { presignedData, placeId: newPlaceId } = await response.json();

  //     const data = await response.json();

  //     // Upload files directly to S3 using presigned URLs
  //     const uploadPromises = files.map(async (file, index) => {
  //       // Optimize image client-side before upload
  //       const optimizedFile = await optimizeImage(file);

  //       // Upload to S3 using presigned URL
  //       await fetch(presignedData[index].presignedUrl, {
  //         method: "PUT",
  //         body: optimizedFile,
  //         headers: {
  //           "Content-Type": file.type,
  //         },
  //       });

  //       return presignedData[index].url;
  //     });

  //     await Promise.all(uploadPromises);

  //     // if (data.success) {
  //     //   toast({ title: "Photos uploaded successfully" });
  //     //   onUploadComplete(data.files.map((f: any) => f.url));
  //     //   // Clean up
  //     //   previews.forEach((preview) => URL.revokeObjectURL(preview));
  //     //   setFiles([]);
  //     //   setPreviews([]);
  //     // } else {
  //     //   throw new Error(data.error || "Upload failed");
  //     // }

  //       // Success handling
  //     toast({ title: "Photos uploaded successfully" });
  //     onUploadComplete(presignedData.map((data: { url: string }) => data.url));
      
  //     // Clean up
  //     previews.forEach((preview) => URL.revokeObjectURL(preview));
  //     setFiles([]);
  //     setPreviews([]);


  //   } catch (error) {
  //     toast({ title: "Failed to upload photos", variant: "destructive" });
  //   } finally {
  //     setUploading(false);
  //     setProgress(0);
  //   }
  // };

  // // Helper function to optimize images client-side
  // async function optimizeImage(file: File): Promise<Blob> {
  // // You'll need to install a client-side image processing library like browser-image-compression
  // const imageCompression = (await import('browser-image-compression')).default;
  
  // const options = {
  //   maxSizeMB: 1,
  //   maxWidthOrHeight: 2000,
  //   useWebWorker: true,
  // };

  // try {
  //   return await imageCompression(file, options);
  // } catch (error) {
  //   console.error('Image compression failed:', error);
  //   return file; // Return original file if compression fails
  // }
  // }


  // const handleDeletePlace = async () => {
  //   try {
  //     const response = await fetch('/api/delete-place', {
  //       method: 'DELETE',
  //       headers: {
  //         'Content-Type': 'application/json',
  //       },
  //       body: JSON.stringify({ placeId: place.id }),
  //     });
  
  //     const result = await response.json();
  
  //     if (result.success) {
  //       window.location.href = '/places';
  //     } else {
  //       toast({
  //         title: "Failed to delete place",
  //       });
  //     }
  //   } catch (error) {
  //     console.error('Delete error:', error);
  //     toast({
  //       title: "Failed to delete place",

  //     });
  //   }
  // };
  
  // const handleDeleteImage = async (imageIndex: number) => {
  //   try {
  //     const response = await fetch('/api/delete-image', {
  //       method: 'DELETE',
  //       headers: {
  //         'Content-Type': 'application/json',
  //       },
  //       body: JSON.stringify({ 
  //         placeId: place.id, 
  //         imageIndex 
  //       }),
  //     });
  
  //     const result = await response.json();
  
  //     if (result.success) {
  //       window.location.reload();
  //     } else {
  //       toast({
  //         title: "Failed to delete image",
  //       });
  //     }
  //   } catch (error) {
  //     console.error('Delete error:', error);
  //     toast({
  //       title: "Failed to delete image",
  //     });
  //   }
  // };


import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

  const { user } = useAuth();
  const queryClient = useQueryClient();

    const { data: hasVoted } = useQuery({
    queryKey: ['hasVoted', place.id, user?.id],
    queryFn: () => hasUserVotedForPlace(place.id, user?.id || ''),
    enabled: !!user,
  });
